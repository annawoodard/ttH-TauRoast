#!/usr/bin/env python

from glob import glob
import os
from shutil import copyfile
import yaml

from optparse import OptionParser

parser = OptionParser(usage="%prog config datadir")
opts, args = parser.parse_args()

if len(args) != 2:
    parser.error("no data directory specified")

(baseconfig, basepath,) = args

class Include:
    def __init__(self, *args):
        if len(args) == 1:
            self.args = args[0]
        else:
            self.args = list(args)

    def __repr__(self):
        return "<{0}({1})>".format(self.__class__.__name__, self.args)

    def __str__(self):
        if isinstance(self.args, list):
            return str(self.args)
        return self.args

def include_constructor(loader, node):
    try:
        value = loader.construct_scalar(node)
        return Include(value)
    except:
        values = loader.construct_sequence(node)
        return Include(*values)

def include_representer(dumper, data):
    if isinstance(data.args, list):
        return dumper.represent_sequence(u'!include', data.args)
    return dumper.represent_scalar(u'!include', data.args)

yaml.add_constructor(u'!include', include_constructor)
yaml.add_representer(Include, include_representer)

def tag_convention(min, max):
    res = min
    if max == "":
        res += "+"
    elif max != min:
        res += "-" + max
    return res

# b-tag min & max, clean jet min & max, train mva
categories = [
        ["1", "1", "1", "1", False],
        ["1", "1", "1", "", False],
        ["1", "1", "1", "2", False],
        ["1", "1", "2", "2", False],
        ["1", "1", "2", "", False],
        ["1", "1", "3", "", False],
        ["2", "2", "0", "0", False],
        ["2", "2", "0", "", False],
        ["2", "2", "0", "1", False],
        ["2", "2", "1", "1", False],
        ["2", "2", "1", "", False],
        ["2", "2", "2", "", False],
        # ["1", "2", "1", "", True],
        # ["1", "2", "0", "", False],
        ["1", "2", "0", "", True],
        ]

systematics = [
        ("", False),
        ("JES", True),
        ("TES", True),
        ("PUcorr", False),
        ("topPt", False),
        ("eTauFake", False),
        ("jetTauFake", False),
        ("tauIdEff", False),
        ("qSquared", False),
        ("CSVeventWeightHF", False),
        ("CSVeventWeightLF", False),
        ("CSVeventWeightHFStats1", False),
        ("CSVeventWeightLFStats1", False),
        ("CSVeventWeightHFStats2", False),
        ("CSVeventWeightLFStats2", False),
        ("CSVeventWeightCErr1", False),
        ("CSVeventWeightCErr2", False),
        ]

# systematics = [("", False)]

# mva_default_dir = "/afs/crc.nd.edu/user/m/mwolf3/www/pas_weights/"
mva_categories = filter(lambda xs: xs[4], categories)

clusterdir = os.path.join(basepath, '_cluster')
sourcedir = os.path.join(os.environ["LOCALRT"], "src", "ttH", "TauRoast", "data", "cluster")

if not os.path.exists(clusterdir):
    os.makedirs(clusterdir)

for fn in glob(os.path.join(sourcedir, "*")):
    copyfile(fn, os.path.join(clusterdir, os.path.basename(fn)))

analyze = open(os.path.join(clusterdir, "stage1_analyze.par"), 'w')
fill = open(os.path.join(clusterdir, "stage2_fill.par"), 'w')
plot = open(os.path.join(clusterdir, "stage3_plot.par"), 'w')

analyze.write("cfg,flags\n")
fill.write("cfg\n")
plot.write("cfg\n")

for (bmin, bmax, jmin, jmax, active_mva) in categories:
    for (unc, shape) in systematics:
        for shift in ("Up", "Down"):
            with open(baseconfig) as f:
                data = yaml.load(f)
                postfix = ""

                for i in range(len(data['physics']['cuts'])):
                    cut = data['physics']['cuts'][i]
                    if 'J_NumCleanCSVM' in cut:
                        new_cut = 'J_NumCleanCSVM'
                        if bmax != "":
                            new_cut += " <= " + bmax
                            if bmin != "":
                                new_cut = bmin + " <= " + new_cut
                        else:
                            new_cut += " >= " + bmin
                        data['physics']['cuts'][i] = new_cut
                    elif 'J_NumCleanNonCSVM' in cut:
                        new_cut = 'J_NumCleanNonCSVM'
                        if jmax != "":
                            new_cut += " <= " + jmax
                            if jmin != "":
                                new_cut = jmin + " <= " + new_cut
                        else:
                            new_cut += " >= " + jmin
                        data['physics']['cuts'][i] = new_cut

                basedir = os.path.join(basepath, "{0}b_{1}nb".format(
                    tag_convention(bmin, bmax),
                    tag_convention(jmin, jmax)))

                if active_mva:
                    mvadir = basedir
                elif len(mva_categories) > 0:
                    mva_btags = mva_categories[0][0:2]
                    mva_jets = mva_categories[0][2:4]
                    mvadir = os.path.join(basepath, "{0}b_{1}nb".format(
                        tag_convention(*mva_btags),
                        tag_convention(*mva_jets)))
                else:
                    mvadir = mva_default_dir

                if unc != "":
                    postfix = "_" + "".join([unc, shift])

                    dir = os.path.join(basepath, "{0}b_{1}nb{2}".format(
                        tag_convention(bmin, bmax),
                        tag_convention(jmin, jmax),
                        postfix
                        ))

                    if shape:
                        data['paths']['ntuples'] = data['paths']['ntuples'].replace(".root", postfix + ".root")
                        basedir = dir

                        analyze.write(os.path.join(dir, "roast_configuration.yaml") + ",\n")
                        fill.write(os.path.join(dir, "roast_configuration.yaml") + "\n")
                    else:
                        if unc.startswith("CSVeventWeight"):
                            idx = data['physics']['flags'].index(['CSVeventWeight', 'nominal'])
                            data['physics']['flags'][idx] = [unc, shift.lower()]
                        else:
                            try:
                                idx = data['physics']['flags'].index([unc, 'nominal'])
                                data['physics']['flags'][idx] = [unc, shift.lower()]
                            except:
                                data['physics']['flags'].append([unc, shift.lower()])

                        fill.write(os.path.join(dir, "roast_configuration.yaml") + "\n")

                    if 'Collisions' in data['analysis']['process']:
                        data['analysis']['process'].remove('Collisions')
                else:
                    # only need to do this once, not twice
                    if shift == "Down":
                        continue

                    dir = basedir
                    flag = ",-t" if active_mva else ","
                    analyze.write(os.path.join(dir, "roast_configuration.yaml") + flag + "\n")
                    fill.write(os.path.join(dir, "roast_configuration.yaml") + "\n")
                    plot.write(os.path.join(dir, "roast_configuration.yaml") + "\n")

                data['paths']['root'] = dir
                data['paths']['input'] = os.path.join(basedir, "roast_processed.root")
                data['paths']['systematics input'] = os.path.join(basedir + "_{s}", "roast_filled.root")
                data['paths']['output'] = os.path.join(dir, "roast_filled.root")
                data['paths']['mva output'] = os.path.join(mvadir, "{m}")
                data['paths']['stack format'] = os.path.join(dir, "{t}/{d}/{n}{m}.{t}")

                if not os.path.exists(dir):
                    os.makedirs(dir)
                print "Writing", os.path.join(dir, "roast_configuration.yaml")
                outfile = open(os.path.join(dir, "roast_configuration.yaml"), "w")
                outfile.write(yaml.dump(data))
                outfile.close()
