#!/usr/bin/env python
"""Copy histograms for datacard making

Usage: copy_histograms [options] configuration...

Takes every configuration file passed, and writes MVA histograms therein to
`ditau.root` (or as specified in the options).
"""

from glob import glob
import os
import sys
import yaml

from optparse import OptionParser

parser = OptionParser(usage="%prog [options] configuration...")
parser.add_option("-v", "--variable", dest="var",
        help="use VAR to determine input and output variables.  VAR has "
        "form `input=output'.",
        metavar="VAR", default="FinalBDTG=MVA")
parser.add_option("-o", "--output-file", dest="file",
        help="use FILE as output file (default: ditau.root)",
        metavar="FILE",
        default="ditau.root")
opts, args = parser.parse_args()

try:
    (invar, outvar) = opts.var.split("=")
except:
    parser.error("variable transformation has wrong form: " + opts.var)
    sys.exit(1)

if len(args) < 1:
    parser.error("need at least one input configuration")
    sys.exit(1)

import ROOT as r

r.gROOT.SetBatch()
r.gSystem.Load("libTTHTauTauRoast")

try:
    from ROOT import roast
except:
    sys.stderr.write("Failed to import 'roast'!\n")
    sys.exit(1)

from TTHTauTau.Roast.helper import *

samples = {
        'data_obs': ['Collisions'],
        'ttH110': ['TTH_110'],
        'ttH115': ['TTH_115'],
        'ttH120': ['TTH_120'],
        'ttH125': ['TTH_125'],
        'ttH130': ['TTH_130'],
        'ttH135': ['TTH_135'],
        'ttH140': ['TTH_140'],
        #'ttH110': ['TTHTauTau_110_real'],
        #'ttH115': ['TTHTauTau_115_real'],
        #'ttH120': ['TTHTauTau_120_real'],
        #'ttH125': ['TTHTauTau_125_real'],
        #'ttH130': ['TTHTauTau_130_real'],
        #'ttH135': ['TTHTauTau_135_real'],
        #'ttH140': ['TTHTauTau_140_real'],
        #'ttV' : ['ttPlusZ','ttPlusW'],
        'ttbarW': ['ttPlusW'],
        'ttbarZ': ['ttPlusZ'],
        'diboson': ['WW','WZ','ZZ'],
        'singlet': ['singleTopSch', 'singleTopBarSch', 'singleTopTch', 'singleTopBarTch', 'singleTopPlusW', 'singleTopBarPlusW'],
        'ttbar': ['TTbar_Hadronic', 'TTbar_SemiLept', 'TTbar_FullLept'],
        'wjets': ['WplusOneJet', 'WplusTwoJets', 'WplusThreeJets', 'WplusFourJets'],
        'zjets': ['ZplusOneJet', 'ZplusTwoJets', 'ZplusThreeJets', 'ZplusFourJets'],
        #'sT' : ['sT-sCh','sT-tCh'],
        #'sTbar' : ['sTbar-sCh','sTbar-tCh'],
        #'sTplusW' : ['sTW','sTbarW']
}

sys_rename = {
        'JES': 'CMS_scale_j',
        'topPt': 'CMS_ttH_topPtcorr',
        'PUcorr': 'CMS_ttH_pu',
        'qSquared': 'Q2scale_ttH_ttbar',
        'CSVeventWeight': 'CMS_ttH_CSV'
}

def copy_histos(outfile, config, infile, invar, outvar, mod_string):
    print "Processing", infile
    procs = load("Roast", infile)
    normalize_processes(config, procs)
    combine_processes(config, procs)

    for (outsample, ss) in samples.items():
        try:
            base_histo = get_process(ss[0], procs).GetHistogram(invar).GetHisto().Clone()

            for s in ss[1:]:
                try:
                    plus_histo = get_process(s, procs).GetHistogram(invar).GetHisto().Clone()
                    base_histo.Add(plus_histo)
                except:
                    print "Could not find " + s
                    pass

            new_name = outsample + '_' + outvar + '_' + mod_string
            base_histo.SetName(new_name)
            outfile.WriteObject(base_histo, new_name)
            # print "Saved", new_name, "with", base_histo.Integral(), "events"

        except Exception, e:
            print "Could not find " + ss[0]
            print e
            pass
    for p in procs:
        del p

outfile = r.TFile(opts.file, "recreate")

for fn in args:
    with open(fn) as f:
        config = yaml.load(f)

        basedir = os.path.join(os.environ['CMSSW_BASE'], 'src/TTHTauTau/Roast/data')
        processes = yaml.load(open(os.path.join(basedir, config['processes'])))
        config['processes'] = processes

        category = "TTL_" + os.path.basename(os.path.dirname(config['paths']['output']))
        copy_histos(outfile, config, config['paths']['output'], invar, outvar, category)
        print category

        for infile in glob(config['paths']['systematics input'].format(s="*")):
            category = "TTL_" + os.path.basename(os.path.dirname(infile))
            for (orig, repl) in sys_rename.items():
                category = category.replace(orig, repl)
            copy_histos(outfile, config, infile, invar, outvar, category)
            print category
