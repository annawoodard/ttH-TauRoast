#!/usr/bin/env python
# vim: foldmethod=marker

from collections import namedtuple, defaultdict
from functools import partial
from itertools import combinations
import glob
import os
import re
import ROOT as r
import sys

r.gROOT.SetBatch()

# class used to store accessor information
Attr = namedtuple('Attr', ['prefix', 'name', 'channels'])

def gather_function_info(filename):
    """Returns a list of function names starting with `Get` from a header
    file."""
    names = []
    with open(filename) as f:
        for l in f.readlines():
            m = re.match(r'\s*(?:\w+\s+)*(Get\w*)\(.*', l)
            if m:
                names.append(m.group(1))
    return names

def gather_type_info(filename, channel):
    """Returns a list containing channel, name, class, and bool
    indicating a pointer."""
    results = []

    f = r.TFile(filename)
    tpl = f.Get("TTbarHTauTau")

    for bn in tpl.GetListOfBranches():
        name = bn.GetName()
        cls = bn.GetClassName()
        ptr = False

        if cls.startswith("vector"):
            cls = cls.replace("vector", "std::vector") + "*"
            ptr = True
        elif cls == "":
            cls = tpl.GetLeaf(name).GetTypeName()

        results.append((channel, name, cls, ptr))
    return results

def generate_type_info(channel, vars, indent=16):
    """Generates definition, address setting, clearing, and deleting info for
    variables for a given channel, and updates corresponding files."""
    address_lines = []
    clear_lines = []
    declare_lines = []
    delete_lines = []
    null_lines = []

    names = sorted(vars.keys())

    for name in names:
        (chans, cls, ptr) = vars[name]

        declare_lines.append(' ' * indent + cls + ' ' + name + ';\n')
        address_lines.append("    fChain->SetBranchAddress(\"{0}\", &{0});\n".format(name))

        if ptr:
            clear_lines.append("    {0}->clear();\n".format(name))
            delete_lines.append("    delete {0};\n".format(name))
        else:
            clear_lines.append("    {0} = 0;\n".format(name))

        null_lines.append("    {0} = 0;\n".format(name))

    header = os.path.join(os.environ["LOCALRT"], 'src', 'ttH', 'TauRoast', 'interface', channel + 'Branches.h')
    source = os.path.join(os.environ["LOCALRT"], 'src', 'ttH', 'TauRoast', 'src', channel + 'Branches_generated.cc')

    inject_lines(header, "declarations", declare_lines)
    inject_lines(source, "address", address_lines)
    inject_lines(source, "clear", clear_lines)
    inject_lines(source, "delete", delete_lines)
    inject_lines(source, "null", null_lines)

def inject_lines(filename, key, lines):
    """Replaces the lines between '// >>> Begin <key> <<<' and
    '// >>> End <key> <<<' with the lines supplied."""
    with open(filename) as file:
        old_lines = file.readlines()
    start = filter(lambda (n, s): "// >>> Begin " + key + " <<<" in s,
            enumerate(old_lines))[0][0]
    end = filter(lambda (n, s): "// >>> End " + key + " <<<" in s,
            enumerate(old_lines))[0][0]
    head = old_lines[:start + 1]
    tail = old_lines[end:]
    with open(filename, 'w') as file:
        for l in head + lines + tail:
            file.write(l)

#------------------\
# main script part  >--------------------------------------------------
#------------------/

channels = set(["TTL", "TLL", "TL", "LL"])

# extract type information from ROOT files passed as arguments, only
# process each unique branch name once
processed_channels = set()
type_info = {}
for fn in sys.argv[1:]:
    chan = filter(lambda c: '/' + c.lower() + '_' in fn, channels)
    if len(chan) != 1:
        raise KeyError, "unable to determine channel of file '{0}'".format(fn)

    if chan[0] in processed_channels:
        continue

    processed_channels.add(chan[0])

    for (channel, name, cls, ptr) in gather_type_info(fn, chan[0]):
        if name in type_info:
            if cls != type_info[name][1] and ptr != type_info[name][2]:
                raise TypeError, "incompatible branches for {0}".format(name)
            type_info[name][0].add(channel)
        else:
            type_info[name] = [set([channel]), cls, ptr]

shared_vars = dict(filter(lambda (k, vals): len(vals[0]) == len(channels), type_info.items()))

generate_type_info("", shared_vars, 12)

for channel in channels:
    def is_channel((k, vals)):
        return len(vals[0]) != len(channels) and channel in vals[0]
    channel_vars = dict(filter(is_channel, type_info.items()))
    if len(channel_vars) > 0:
        generate_type_info(channel, channel_vars)

#----------------\
# accessor setup  >----------------------------------------------------
#----------------/

indent = ' ' * 4
lines = []

cast = '{0}::Branches* e = dynamic_cast<{0}::Branches*>(b)'
declare = 'accessors["{0}"] = [](Branches *b, int idx, int n) -> float {{\n'
reindex = [
        ('', None),
        ('Tagged', 'int i = get_tag_index((*b->J_combSecVtxMediumBTag)[idx], {0});\n'),
        ('Untagged', 'int i = get_untag_index((*b->J_combSecVtxMediumBTag)[idx], {0});\n'),
        ]
returns = {
        0: 'return {0}->{1};',
        1: 'return (*{0}->{1})[{2}];',
        2: 'return (*{0}->{1})[{2}][{3}];'
        }

accessor_template = \
"""        accessors["{0}"] = [](roast::Branches *b, int idx, int n) -> float {{
            {1}
        }};
"""

cast_template = """if ({0}::Branches* e = dynamic_cast<{0}::Branches*>(b)) {{
                {1}
            }}"""

throw_template = """
            throw;"""

tll_template = \
"""        accessors["{1}"] = [](roast::Branches *b, int idx, int n) -> float {{
            tll::Branches* e = dynamic_cast<tll::Branches*>(b);
            if ((*e->TLL_Lepton1Charge)[idx] * (*e->TLL_TauCharge)[idx] {0} 0) {{
                return (*e->{2})[idx];
            }}
            return (*e->{3})[idx];
        }};
"""

fct_names = {}
for channel in list(channels) + [""]:
    for fn in gather_function_info(os.path.join(os.environ["LOCALRT"],
            'src', 'ttH', 'TauRoast','interface', channel + 'Branches.h')):
        if fn not in fct_names:
            fct_names[fn] = []
        fct_names[fn].append(channel)

# Deal with functions first
for ignore in "GetBestCombo GetEntries GetEntry GetNumCombos".split():
    if ignore in fct_names:
        del fct_names[ignore]

for fn in sorted(fct_names.keys()):
    name = fn.replace("Get", "")
    m = re.match('(?:(?:Lepton|Tau)\d?)+', name)
    if m:
        combo_var = True

        full_pre = m.group(0)
        pre = ""
        for (particle, num) in re.findall('(Lepton|Tau)(\d)?', full_pre):
            pre += particle[0]
            if num:
                pre += num

        name = name.replace(m.group(0), pre + '_')

    m = re.match('((?:Clean)?)Jet', name)
    if m:
        combo_var = False
        name = name.replace(m.group(0), m.group(1) + 'J_')

    lines.append(indent * 2 + declare.format(name))
    if len(fct_names[fn]) == 1:
        channel = fct_names[fn][0]
        var = 'b'
        if channel != "":
            var = 'e'
            lines.append(indent * 3 + cast.format(channel.lower()) + ';\n')
        if combo_var:
            lines.append(indent * 3 + 'return {0}->{1}(idx);\n'.format(var, fn))
        else:
            lines.append(indent * 3 + 'return {0}->{1}(idx, n);\n'.format(var, fn))
        lines.append(indent * 2 + '};\n')
    else:
        cond = 'if ('

        for p in fct_names[fn]:
            if p not in channels:
                raise ValueError(p)

            chan = p.lower()
            lines.append(indent * 3 + cond + cast.format(chan) + ') {\n')

            if combo_var:
                lines.append(indent * 4 + 'return {0}->{1}(idx);\n'.format(var, fn))
            else:
                lines.append(indent * 4 + 'return {0}->{1}(idx, n);\n'.format(var, fn))

            cond = '} else if ('
        lines.append(indent * 3 + '}\n')
        lines.append(indent * 3 + 'throw "";\n')
        # lines.append(indent * 3 + 'return -1. / 0.;\n')
        lines.append(indent * 2 + '};\n')

# Now turn to branches
def generate_return_line(name, chans, cls="", method=None, expr=False, safe=False, subidx='n', idx='idx'):
    cnt = cls.count('vector')

    if cnt not in returns:
        raise TypeError

    if len(chans) == len(channels):
        res = (name if expr else returns[cnt])

        if safe:
            res = res.replace("[{3}]", ".at({3})")
        if method:
            res = res.replace(';', '.{0}();'.format(method))

        return res.format('b', name, idx, subidx)
    else:
        lines = []
        for chan in sorted(chans):
            res = name if expr else returns[cnt]

            if safe:
                res = res.replace("[{3}]", ".at({3})")
            if method:
                res = res.replace(';', '.{0}();'.format(method))

            lines.append(cast_template.format(chan.lower(), res.format('e', name, idx, subidx)))
        return " else ".join(lines) + throw_template

jets = 'LJ SubLJ SubSubLJ SubSubSubLJ'.split()

p4s = []
# order matters!  MET and jets have to be at the end!
for fun in map(partial(partial, re.match), ('T\d*_P$', 'L\d*_P$', 'MET_P$', 'J_P$')):
    p4s += sorted([(var, type_info[var][0]) for var in type_info if fun(var)], key=lambda xs: xs[0])

for (p4, chans) in filter(lambda (p, cs): p.startswith('L'), p4s):
    lines.append(indent * 2 + declare.format(p4[:-2] + '_Mt'))
    lines.append(indent * 3
            + generate_return_line(
                ('return sqrt(2 * (*{{0}}->{0})[idx].pt() * (*{{0}}->MET_P)[idx].pt() * '
                    + '(1 - cos((*{{0}}->{0})[idx].phi() - (*{{0}}->MET_P)[idx].phi())));').format(p4),
                chans, expr=True)
            + '\n')
    lines.append(indent * 2 + '};\n')

for ((p1, cs1), (p2, cs2)) in combinations(p4s, 2):
    chans = cs1.intersection(cs2)

    if len(chans) == 0:
        continue

    if p2 == 'J_P':
        # jets {{{1
        for (label, index_statement) in reindex:
            accessor = p1[:-2] + label + p2[:-2]

            if index_statement:
                addlines = [indent * 3 + index_statement.format('n')]
                subidx = 'i'
            else:
                addlines = []
                subidx = 'n'

            lines.append(indent * 2 + declare.format(accessor + '_CosDeltaPhi'))
            lines += addlines
            lines.append(indent * 3
                    + generate_return_line(
                        'return cos((*{{0}}->{0})[idx].phi() - (*{{0}}->{1})[idx].at({2}).phi());'.format(p1, p2, subidx),
                        chans, expr=True)
                    + '\n')
            lines.append(indent * 2 + '};\n')

            if p1 != 'MET_P':
                lines.append(indent * 2 + declare.format(accessor + '_DeltaR'))
                lines += addlines
                lines.append(indent * 3
                        + generate_return_line(
                            'return reco::deltaR((*{{0}}->{0})[idx], (*{{0}}->{1})[idx].at({2}));'.format(p1, p2, subidx),
                            chans, expr=True)
                        + '\n')
                lines.append(indent * 2 + '};\n')

                lines.append(indent * 2 + declare.format(accessor + '_VisibleMass'))
                lines += addlines
                lines.append(indent * 3
                        + generate_return_line(
                            'return ((*{{0}}->{0})[idx] + (*{{0}}->{1})[idx].at({2})).M();'.format(p1, p2, subidx),
                            chans, expr=True)
                        + '\n')
                lines.append(indent * 2 + '};\n')

            # leading jet etc {{{2
            for (n, j) in enumerate(jets):
                new_key = accessor.replace('J', j)

                if index_statement:
                    addlines = [indent * 3 + index_statement.format(n)]
                    subidx = 'i'
                else:
                    addlines = []
                    subidx = str(n)

                lines.append(indent * 2 + declare.format(new_key + '_CosDeltaPhi'))
                lines += addlines
                lines.append(indent * 3
                        + generate_return_line(
                            'return cos((*{{0}}->{0})[idx].phi() - (*{{0}}->{1})[idx].at({2}).phi());'.format(p1, p2, subidx),
                            chans, expr=True)
                        + '\n')
                lines.append(indent * 2 + '};\n')

                if p1 != 'MET_P':
                    lines.append(indent * 2 + declare.format(new_key + '_DeltaR'))
                    lines += addlines
                    lines.append(indent * 3
                            + generate_return_line(
                                'return reco::deltaR((*{{0}}->{0})[idx], (*{{0}}->{1})[idx].at({2}));'.format(p1, p2, subidx),
                                chans, expr=True)
                            + '\n')
                    lines.append(indent * 2 + '};\n')

                    lines.append(indent * 2 + declare.format(new_key + '_VisibleMass'))
                    lines += addlines
                    lines.append(indent * 3
                            + generate_return_line(
                                'return ((*{{0}}->{0})[idx] + (*{{0}}->{1})[idx].at({2})).M();'.format(p1, p2, subidx),
                                chans, expr=True)
                            + '\n')
                    lines.append(indent * 2 + '};\n')
            # }}}2
        # }}}1
    else:
        if p1[0] == p2[0]:
            accessor = p1[0] + p2[0]
        else:
            accessor = p1[:-2] + p2[:-2]

        lines.append(indent * 2 + declare.format(accessor + '_CosDeltaPhi'))
        lines.append(indent * 3
                + generate_return_line(
                    'return cos((*{{0}}->{0})[idx].phi() - (*{{0}}->{1})[idx].phi());'.format(p1, p2),
                    chans, expr=True)
                + '\n')
        lines.append(indent * 2 + '};\n')

        if p2 != 'MET_P':
            lines.append(indent * 2 + declare.format(accessor + '_DeltaR'))
            lines.append(indent * 3
                    + generate_return_line(
                        'return reco::deltaR((*{{0}}->{0})[idx], (*{{0}}->{1})[idx]);'.format(p1, p2),
                        chans, expr=True)
                    + '\n')
            lines.append(indent * 2 + '};\n')

            lines.append(indent * 2 + declare.format(accessor + '_VisibleMass'))
            lines.append(indent * 3
                    + generate_return_line(
                        'return ((*{{0}}->{0})[idx] + (*{{0}}->{1})[idx]).M();'.format(p1, p2),
                        chans, expr=True)
                    + '\n')
            lines.append(indent * 2 + '};\n')

for accessor in sorted(type_info.keys()):
    (chans, cls, ptr) = type_info[accessor]

    var = accessor

    # no mention of HPS anywhere
    rm = re.search(r'HPS(?:by)?(.)', accessor)
    if rm:
        accessor = accessor.replace(rm.group(0), rm.group(1).upper())
        accessor = accessor.replace("Against", "Anti")

    # N -> Num where appropriate
    num = re.search(r'_N([A-Z][a-z])', accessor)
    if num:
        accessor = accessor.replace(num.group(0), '_Num' + num.group(1))

    # remove btagJets at end of varname
    if accessor.endswith('btagJets'):
        accessor = 'J_' + accessor[:-8]

    # camel case correctly
    accessor = accessor.replace("raw", "Raw")

    # consolidate type information
    # if 'LorentzVector' in cls:
        # cannot do anything with a LorentzVector at the moment
        # continue

    try:
        tmp_lines = []

        if not accessor.startswith("J_"):
            if 'LorentzVector' in cls:
                for q in ('Pt', 'Eta', 'Phi'):
                    lines.append(indent * 2 + declare.format(accessor[:-1] + q))
                    lines.append(indent * 3
                        + generate_return_line(var, chans, cls, method=q.lower())
                        + '\n')
                    lines.append(indent * 2 + '};\n')
                continue
            else:
                tmp_lines.append(indent * 2 + declare.format(accessor))
                tmp_lines.append(indent * 3 + generate_return_line(var, chans, cls) + '\n')
        elif 'LorentzVector' in cls:
            for q in ('Pt', 'Eta', 'Phi'):
                for (label, index_statement) in reindex:
                    lines.append(indent * 2 + declare.format(label + accessor[:-1] + q))

                    if index_statement:
                        lines.append(indent * 3 + index_statement.format('n'))
                        subidx = 'i'
                    else:
                        subidx = 'n'

                    lines.append(indent * 3
                            + generate_return_line(
                                var, chans, cls, method=q.lower(),
                                subidx=subidx, safe=True)
                            + '\n')
                    lines.append(indent * 2 + '};\n')

                    # leading jet etc.
                    for (n, j) in enumerate(jets):
                        new_key = label + accessor.replace('J', j)[:-1] + q
                        lines.append(indent * 2 + declare.format(new_key))

                        if index_statement:
                            lines.append(indent * 3 + index_statement.format(n))
                            subidx = 'i'
                        else:
                            subidx = str(n)

                        lines.append(indent * 3
                                + generate_return_line(
                                    var, chans, cls, method=q.lower(),
                                    subidx=subidx, safe=True)
                                + '\n')
                        lines.append(indent * 2 + '};\n')
            continue
        else:
            if var == 'J_combSecVtxBTag':
                accessor = 'J_CSV'
            elif var == 'CSV' or 'BTag' in var or var == 'MomentumRank':
                continue

            jet_lines = []

            tmp_lines.append(indent * 2 + declare.format(accessor))
            tmp_lines.append(indent * 3 + generate_return_line(var, chans, cls) + '\n')

            if 'Num' not in var:
                for (label, index_statement) in reindex:
                    jet_lines.append(indent * 2 + declare.format(label + accessor))

                    if index_statement:
                        jet_lines.append(indent * 3 + index_statement.format('n'))
                        subidx = 'i'
                    else:
                        subidx = 'n'

                    jet_lines.append(indent * 3 + generate_return_line(var, chans, cls, subidx=subidx, safe=True) + '\n')
                    jet_lines.append(indent * 2 + '};\n')

                    # leading jet etc.
                    for (n, j) in enumerate(jets):
                        new_key = label + accessor.replace('J', j)
                        jet_lines.append(indent * 2 + declare.format(new_key))

                        if index_statement:
                            jet_lines.append(indent * 3 + index_statement.format(n))
                            subidx = 'i'
                        else:
                            subidx = str(n)

                        jet_lines.append(indent * 3 + generate_return_line(var, chans, cls, subidx=subidx, safe=True) + '\n')
                        jet_lines.append(indent * 2 + '};\n')
                lines += jet_lines

        tmp_lines.append(indent * 2 + '};\n')

        lines += tmp_lines
    except ValueError as e:
        print 'cannot associate {0} with a valid channel: {1}'.format(accessor, e)
        raise
    except TypeError as e:
        print '{0} is of unprocessable type'.format(accessor)
        raise

source = os.path.join(os.environ["LOCALRT"], 'src', 'ttH', 'TauRoast', 'src', 'Accessor.cc')
inject_lines(source, "attr", lines)
