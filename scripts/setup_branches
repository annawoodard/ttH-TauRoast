#!/usr/bin/env python

import os
import ROOT as r
import sys

r.gROOT.SetBatch()

def gather_type_info(filename):
    """Returns a list containing prefix, name, class, and bool indicating
    a pointer."""
    results = []

    f = r.TFile(filename)
    tpl = f.Get("makeNtuple/TTbarHTauTau")

    for bn in tpl.GetListOfBranches():
        name = bn.GetName()
        cls = bn.GetClassName()
        ptr = False

        (start, end) = name.split("_", 1)

        if cls.startswith("vector"):
            cls = "std::" + cls + "*"
            ptr = True
        elif cls == "":
            cls = tpl.GetLeaf(name).GetTypeName()

        results.append((start, end, cls, ptr))
    return results

def inject_lines(filename, key, lines):
    """Replaces the lines between '// >>> Begin <key> <<<' and
    '// >>> End <key> <<<' with the lines supplied."""
    with open(filename) as file:
        old_lines = file.readlines()
    start = filter(lambda (n, s): "// >>> Begin " + key + " <<<" in s,
            enumerate(old_lines))[0][0]
    end = filter(lambda (n, s): "// >>> End " + key + " <<<" in s,
            enumerate(old_lines))[0][0]
    head = old_lines[:start + 1]
    tail = old_lines[end:]
    with open(filename, 'w') as file:
        for l in head + lines + tail:
            file.write(l)

def generate_type_info(channel, vars, indent=16):
    """Generates definition, address setting, clearing, and deleting info for
    variables for a given channel, and updates corresponding files."""
    address_lines = []
    clear_lines = []
    declare_lines = []
    delete_lines = []
    null_lines = []

    for (k, s, t, p) in vars:
        if ("CSV" in s) and ("Weight" in s):
            varname = s
            if channel == "":
                declare_lines.append(' ' * indent + t + ' ' + varname + ';\n')
                continue
        else:
            varname = "_".join([k, s])
            declare_lines.append(' ' * indent + t + ' ' + varname + ';\n')

        if p:
            clear_lines.append("    {0}->clear();\n".format(varname))
            delete_lines.append("    delete {0};\n".format(varname))
        else:
            clear_lines.append("    {0} = 0;\n".format(varname))

        null_lines.append("    {0} = 0;\n".format(varname))
        address_lines.append("    fChain->SetBranchAddress(\"{0}\", &{1});\n".format("_".join([k, s]), varname))
    header = os.path.join(os.environ["CMSSW_BASE"], 'src', 'TTHTauTau', 'Roast', 'interface', channel + 'Branches.h')
    source = os.path.join(os.environ["CMSSW_BASE"], 'src', 'TTHTauTau', 'Roast', 'src', channel + 'Branches_generated.cc')
    inject_lines(header, "declarations", declare_lines)
    inject_lines(source, "address", address_lines)
    inject_lines(source, "clear", clear_lines)
    inject_lines(source, "delete", delete_lines)
    inject_lines(source, "null", null_lines)

vars = sorted(gather_type_info(sys.argv[1]), key=lambda tpl: "_".join(tpl[:2]))

channels = set(["TTL", "TLL"])

shared_vars = filter(lambda (k, s, t, p): k not in channels or (("CSV" in s) and ("Weight" in s)), vars)
generate_type_info("", shared_vars, 12)

for channel in channels:
    channel_vars = filter(lambda (k, s, t, p): k == channel, vars)
    print "{0} variables for {1}".format(len(channel_vars), channel)
    if len(channel_vars) > 0:
        generate_type_info(channel, channel_vars)
