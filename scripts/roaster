#!/usr/bin/env python
# vim: ts=4:sw=4:et:sta

import argparse

parser = argparse.ArgumentParser(description='Grill some taus.')
parser.add_argument('config', metavar='config', type=str, nargs=1,
        help='a configuration file to use')
parser.add_argument('-v', '--verbose', action="count", default=0,
        help="increase verbosity")
parser.add_argument('-q', '--quiet', action="count", default=0,
        help="decrease verbosity")

args = parser.parse_args()

import logging

# Logging setup
logging.basicConfig(
        datefmt="%Y-%m-%d %H:%M:%S",
        format="%(asctime)s [%(levelname)s] - %(filename)s %(lineno)d: %(message)s")

logging.__dict__['root'].level = (2 + args.quiet - args.verbose) * 10

import ROOT as r

r.gROOT.SetBatch()
r.gErrorIgnoreLevel = 1001
r.gSystem.Load("libttHTauRoast")

from ttH.TauRoast.cutting import Cut
from ttH.TauRoast.plotting import Plot
from ttH.TauRoast.processing import Process

import imp
import os
from glob import glob
magic = os.path.join(os.environ["LOCALRT"], 'src', 'ttH', 'TauRoast', 'data', 'plots', '*.py')
for n, file in enumerate(glob(magic)):
    imp.load_source("plots{0}".format(n), file)

magic = os.path.join(os.environ["LOCALRT"], 'src', 'ttH', 'TauRoast', 'data', 'procs', '*.py')
for n, file in enumerate(glob(magic)):
    imp.load_source("procs{0}".format(n), file)

cuts = [
        Cut("True"),
        Cut("leptons.size() == 1"),
        Cut("taus[0].charge() * taus[1].charge() < 0")
]

f = r.TFile("test.root")
t = f.Get("taus/events")

event = r.superslim.Event()
t.SetBranchAddress('Event', r.AddressOf(event))

for i in range(t.GetEntries()):
    t.GetEntry(i)
    for combo in event.combos():
        for cut in cuts:
            if not cut("ttH", event, combo):
                break
        else:
            for plot in Plot.plots():
                try:
                    plot.fill("ttH", event, combo)
                except Exception, e:
                    print "error in", plot.name
                    print e
        break

for cut in cuts:
    print cut, cut["ttH"]

c = r.TCanvas("c", "c", 700, 600)
# cmbs.Draw()
for n, plot in enumerate(Plot.plots()):
    end = ""
    if n == 0:
        end = "("
    elif n == len(Plot.plots()) - 1:
        end = ")"
    plot.draw()
    c.SaveAs("test.pdf" + end)
