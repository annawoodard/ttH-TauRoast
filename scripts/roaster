#!/usr/bin/env python

import math
import os
import ROOT as r
import sys

r.gROOT.SetBatch()
r.gSystem.Load("libTTHTauTauRoast")

try:
    from ROOT import roast
except:
    sys.stderr.write("Failed to import 'roast'!\n")
    sys.exit(1)

import yaml

from TTHTauTau.Roast.helper import *
from TTHTauTau.Roast.process import analyze, fill_histos

def save(items, name, file):
    """Save a list of objects to a `file` with the key `name`."""
    if not os.path.isdir(os.path.dirname(file)):
        os.makedirs(os.path.dirname(file))
    f = r.TFile(file, "RECREATE")
    f.WriteObject(vectorize(items, "roast::Process*"), name)
    f.Close()

def load(name, file):
    """Load an object with key `name` from `file`."""
    f = r.TFile(file)
    obj = r.std.vector("roast::Process*")()
    f.GetObject(name, obj)
    f.Close()
    items = []
    for o in obj:
        items.append(o)
    return items

def normalize_processes(options, processes):
    lumi = options['physics']['lumi']

    try:
        coll = get_collisions(processes)
        if coll.GetNOEanalyzed() != coll.GetNOEinNtuple():
            lumi *= coll.GetNOEanalyzed() / float(coll.GetNOEinNtuple())
        coll.GetCutFlow().RegisterCutFromLast("Lumi norm", 2, 1)
        coll.BuildNormalizedCutFlow()
    except:
        pass

    for p in processes:
        if p.IsCollisions():
            continue

        est_lumi = lumi * p.GetCrossSection() * p.GetBranchingRatio()
        raw_events = p.GetNOEinDS() * p.GetNOEanalyzed() / float(p.GetNOEinNtuple())

        p.ScaleHistograms(est_lumi / raw_events)
        p.GetCutFlow().RegisterCutFromLast("Lumi norm", 2, est_lumi / raw_events)
        p.BuildNormalizedCutFlow()





def get_integrals(histname, processes):
    vals = []
    for p in processes:
        vals.append(p.GetHContainerForSignal()[histname].GetHisto().Integral())
    return vals

def get_maximum(histname, processes, inc_error=False):
    vals = []
    for p in processes:
        if inc_error:
            vals.append(p.GetHContainerForSignal()[histname].GetMaximumWithError())
        else:
            vals.append(p.GetHContainerForSignal()[histname].GetMaximum())
    return max(vals)

def plot_stacks(options, processes):
    procs = filter(lambda p: p.GetShortName() in options['analysis']['plot'], processes)

    plot_ratio = True

    padding = 0.001
    y_divide = 0.25
    ratio_plot_max = 2.5
    bottom_margin = 0.35
    small_number = 0.0001

    for histname in procs[0].GetHistogramNames():
        if all(map(lambda v: v <= 0, get_integrals(histname, procs))):
            # FIXME log this properly
            print "Empty histogram:", histname
            continue

        print "Saving", histname

        max_y = 1.3 * get_maximum(histname, procs, True)

        base_histo = roast.HWrapper(procs[0].GetHContainerForSignal()[histname])
        base_histo.ScaleBy(0)

        if plot_ratio:
            min_y = 0.002
            canvas = r.TCanvas(histname, histname, 800, 1000)
            canvas.Divide(1, 2)
            canvas.GetPad(1).SetPad(padding, y_divide + padding, 1 - padding, 1 - padding)
            canvas.GetPad(1).SetTopMargin(0.065)
            canvas.GetPad(1).SetBottomMargin(0)
            canvas.GetPad(2).SetPad(padding, padding, 1 - padding, y_divide - padding)
            canvas.GetPad(2).SetBottomMargin(bottom_margin)
            canvas.cd(1)
        else:
            min_y = 0.001
            canvas = r.TCanvas(histname, histname, 800, 800)
            canvas.cd()

        base_histo.GetHisto().GetYaxis().SetRangeUser(min_y, max_y)
        base_histo.GetHisto().Draw("HIST")



        canvas.SaveAs("foo.png")

from optparse import OptionParser

parser = OptionParser()
parser.add_option("-a", "--analyze",
        action="store_true",
        dest="analyze",
        help="analyze processes")
parser.add_option("-f", "--fill",
        action="store_true",
        dest="fill",
        help="fill histograms for analyzed processes")
parser.add_option("-p", "--plot",
        action="store_true",
        dest="plot",
        help="save plots")
opts, args = parser.parse_args()

baseconfig = yaml.load(open("data/generic.yaml"))
processconfig = yaml.load(open(baseconfig['processes']))
histogramconfig = yaml.load(open(baseconfig['histograms']))

baseconfig['processes'] = processconfig
baseconfig['histograms'] = histogramconfig

if opts.analyze:
    procs = analyze(baseconfig)
    save(procs, "Roast", baseconfig['paths']['input'])
else:
    procs = None

if opts.fill:
    if not procs:
        procs = load("Roast", baseconfig['paths']['input'])
    fill_histos(baseconfig, procs)
    save(procs, "Roast", baseconfig['paths']['output'])

if not (opts.plot):
    sys.exit(0)

if not procs:
    procs = load("Roast", baseconfig['paths']['output'])

normalize_processes(baseconfig, procs)

# print procs[0].GetCutFlow().GetLastCut()

if opts.plot:
    plot_stacks(baseconfig, procs)

# print "passed", len(procs[0].GetGoodEventsForSignal())
# for e in procs[0].GetGoodEventsForSignal():
    # print "size", e.combos.size()
    # print "first", e.combos[0]
