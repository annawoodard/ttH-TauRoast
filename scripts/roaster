#!/usr/bin/env python

import math
import os
import ROOT as r
import sys

r.gROOT.SetBatch()
r.gSystem.Load("libTTHTauTauRoast")

try:
    from ROOT import roast
except:
    sys.stderr.write("Failed to import 'roast'!\n")
    sys.exit(1)

import yaml

from TTHTauTau.Roast.display import stack
from TTHTauTau.Roast.helper import *
from TTHTauTau.Roast.process import analyze, fill_histos
from TTHTauTau.Roast.style import *

def save(items, name, file):
    """Save a list of objects to a `file` with the key `name`."""
    if not os.path.isdir(os.path.dirname(file)):
        os.makedirs(os.path.dirname(file))
    f = r.TFile(file, "RECREATE")
    f.WriteObject(vectorize(items, "roast::Process*"), name)
    f.Close()

def load(name, file):
    """Load an object with key `name` from `file`."""
    f = r.TFile(file)
    obj = r.std.vector("roast::Process*")()
    f.GetObject(name, obj)
    f.Close()
    items = []
    for o in obj:
        items.append(o)
    return items

from optparse import OptionParser

parser = OptionParser()
parser.add_option("-a", "--analyze",
        action="store_true",
        dest="analyze",
        help="analyze processes")
parser.add_option("-f", "--fill",
        action="store_true",
        dest="fill",
        help="fill histograms for analyzed processes")
parser.add_option("-p", "--plot",
        action="store_true",
        dest="plot",
        help="save plots")
parser.add_option("-t", "--train",
        action="store_true",
        dest="train",
        help="train MVAs")
opts, args = parser.parse_args()

baseconfig = yaml.load(open("data/generic.yaml"))
processconfig = yaml.load(open(baseconfig['processes']))
histogramconfig = yaml.load(open(baseconfig['histograms']))

baseconfig['processes'] = processconfig
baseconfig['histograms'] = histogramconfig

to_process = []
for p in baseconfig['analysis']['process']:
    if p in baseconfig['analysis']['combine']:
        to_process += baseconfig['analysis']['combine'][p]['processes']
    else:
        to_process.append(p)
baseconfig['analysis']['process'] = to_process

if opts.analyze:
    procs = analyze(baseconfig)
    save(procs, "Roast", baseconfig['paths']['input'])
else:
    procs = None

if opts.train:
    if not procs:
        procs = load("Roast", baseconfig['paths']['input'])
    train_mva(baseconfig, procs)

if opts.fill:
    if not procs:
        procs = load("Roast", baseconfig['paths']['input'])
    book_mva(baseconfig, procs)
    fill_histos(baseconfig, procs)
    save(procs, "Roast", baseconfig['paths']['output'])

if not (opts.plot):
    sys.exit(0)

if not procs:
    procs = load("Roast", baseconfig['paths']['output'])

normalize_processes(baseconfig, procs)
combine_processes(baseconfig, procs)

if opts.plot:
    style = create_tdr_style()
    style.cd()
    stack(baseconfig, procs)

# print "passed", len(procs[0].GetGoodEventsForSignal())
# for e in procs[0].GetGoodEventsForSignal():
    # print "size", e.combos.size()
    # print "first", e.combos[0]
