#!/usr/bin/env python
# vim: ts=4:sw=4:et:sta

import argparse
import logging
import os
import yaml

parser = argparse.ArgumentParser(description='Grill some taus.')
parser.add_argument('config', metavar='config', type=str, nargs=1,
        help='a configuration file to use')
parser.add_argument('-v', '--verbose', action="count", default=0,
        help="increase verbosity")
parser.add_argument('-q', '--quiet', action="count", default=0,
        help="decrease verbosity")
ag = parser.add_argument_group('analysis options')
ag.add_argument('-f', '--fill', action='store_true', default=False,
        help="fill histograms")
ag.add_argument('-p', '--plot', action='store_true', default=False,
        help="save histograms")

args = parser.parse_args()

if not any([args.fill, args.plot]):
    parser.error("need to either fill or plot")

# Logging setup
logging.basicConfig(
        datefmt="%Y-%m-%d %H:%M:%S",
        format="%(asctime)s [%(levelname)s] - %(filename)s %(lineno)d: %(message)s")

logging.__dict__['root'].level = (2 + args.quiet - args.verbose) * 10

with open(args.config[0]) as f:
    config = yaml.load(f)

datadir = os.path.join(os.environ["LOCALRT"], 'src', 'ttH', 'TauRoast', 'data')

with open(os.path.join(datadir, 'plot.yaml')) as f:
    plotconfig = yaml.load(f)

import ROOT as r

r.gROOT.SetBatch()
r.gErrorIgnoreLevel = 1001
r.gSystem.Load("libttHTauRoast")

from ttH.TauRoast import stylish
from ttH.TauRoast.cutting import Cut, cutflow, normalize
from ttH.TauRoast.plotting import Plot
from ttH.TauRoast.processing import Process

stylish.setup()

import imp
from glob import glob
magic = os.path.join(datadir, 'plots', '*.py')
for n, file in enumerate(glob(magic)):
    imp.load_source("plots{0}".format(n), file)

magic = os.path.join(datadir, 'procs', '*.py')
for n, file in enumerate(glob(magic)):
    imp.load_source("procs{0}".format(n), file)

if args.fill:
    counts = []
    cuts = [
            Cut("Analyzed", "True")
    ]
    for hash in config["cuts"]:
        cuts.append(Cut(*hash.items()[0]))

    for proc in sum(map(Process.expand, config['plot']), []):
        local_cuts = list(cuts)
        for cfg in proc.additional_cuts:
            local_cuts.insert(2, Cut(*cfg))
        proc.analyze(counts, local_cuts, Plot.plots(), config['ntupledir'])

    cuts = counts + cuts
    normalize(cuts, config["lumi"])
    cutflow(cuts, config["plot"])

    f = r.TFile(os.path.join(config["outdir"], "plots.root"), "RECREATE")

    for p in Plot.plots():
        p.write(f, config["lumi"])

    f.Write()
    f.Close()
else:
    processes = sum(map(Process.expand, config['plot']), [])
    f = r.TFile(os.path.join(config["outdir"], "plots.root"), "READ")

    for p in Plot.plots():
        p.read(f, processes)

    f.Close()

if args.plot:
    for p in Plot.plots():
        p.save(plotconfig, config["outdir"])
