#!/usr/bin/env python
# vim: ts=4:sw=4:et:sta

import logging
import math
import os

# Logging setup
logging.basicConfig(
        datefmt="%Y-%m-%d %H:%M:%S",
        format="%(asctime)s [%(levelname)s] - %(filename)s %(lineno)d: %(message)s")

from optparse import OptionParser

parser = OptionParser(usage="%prog [options] configuration")
parser.add_option("-a", "--analyze",
        action="store_true",
        dest="analyze",
        help="analyze processes")
parser.add_option("-f", "--fill",
        action="store_true",
        dest="fill",
        help="fill histograms for analyzed processes")
parser.add_option("-l", "--limit-file",
        action="store_true",
        dest="limit_file",
        help="produce a file with histograms for limits")
parser.add_option("--list-vars",
        action="store_true",
        dest="list_vars",
        help="list variables for cuts, MVA, etc.")
parser.add_option("-n",
        action="store",
        dest="max",
        type="int",
        metavar="NUM",
        default=None,
        help="process NUM events (default: configuration)")
parser.add_option("-o", "--override",
        action="append",
        dest="overrides",
        metavar="OPT",
        help="override configuration file options, where OPT is formatted "
        "as path.subpath.key=value.")
parser.add_option("-p", "--plot",
        action="store_true",
        dest="plot",
        help="save plots")
parser.add_option("-t", "--train",
        action="store_true",
        dest="train",
        help="train MVAs")
parser.add_option("-v", "--verbose",
        action="count",
        dest="verbosity",
        default=0,
        help="make output more verbose (allowed multiple times)")
parser.add_option("-q", "--quiet",
        action="count",
        dest="quietness",
        default=3,
        help="make output less verbose (allowed multiple times)")
parser.add_option("-y", "--yields",
        action="store_true",
        dest="nums",
        help="print event yield information")
parser.add_option("-Y", "--relative-yields",
        action="store_true",
        dest="nums_rel",
        help="print relative event yield information")
parser.add_option("--normalized",
        action="store_true",
        dest="nums_norm",
        help="print relative event yield information")
parser.add_option("-r", "--ranking",
        action="store_true",
        dest="ranking",
        help="print MVA variable rankings")
opts, args = parser.parse_args()

logging.__dict__['root'].level = (opts.quietness - opts.verbosity) * 10

if len(args) != 1 and not opts.list_vars:
    parser.error('wrong number of arguments')

if opts.nums and opts.nums_rel:
    parser.error('both relative and absolute event yields requested')

if opts.nums_norm and not (opts.nums or opts.nums_rel):
    parser.error("can't specifiy normalized yields without printing yields")

import ROOT as r
import sys

r.gROOT.SetBatch()
r.gErrorIgnoreLevel = 1001
r.gSystem.Load("libttHTauRoast")

try:
    from ROOT import roast
except:
    sys.stderr.write("Failed to import 'roast'!\n")
    sys.exit(1)

import yaml

from ttH.TauRoast.display import stack
from ttH.TauRoast.helper import *
from ttH.TauRoast.process import analyze, fill_histos
from ttH.TauRoast import style

if opts.list_vars:
    for v in roast.get_accessor_names():
        print v
    sys.exit(0)

(configfile,) = args

logging.info("reading configuration from %s", configfile)

basedir = os.path.join(os.environ['LOCALRT'], 'src/ttH/TauRoast/data')
baseconfig = load_config(configfile, basedir, opts.overrides)

logging.debug("using base path %s", baseconfig['paths']['root'])

channel = baseconfig['analysis']['channel']
if channel == 'tll':
    module = roast.tll
elif channel == 'ttl':
    module = roast.ttl
else:
    logging.critical('invalid channel "{0}"'.format(channel))
    sys.exit(1)

if opts.max:
    baseconfig['analysis']['max events'] = opts.max

logging.info("analyzing a maximum of {0} events per process.".format(baseconfig['analysis']['max events']))

to_combine = dict(filter(
    lambda (k, v): 'combine' in v,
    baseconfig['processes'].items()))
to_process = []
for p in baseconfig['analysis']['process']:
    if p in to_combine:
        logging.debug("adding {0} to be processed".format(to_combine[p]['combine']))
        to_process += to_combine[p]['combine']
    else:
        to_process.append(p)
baseconfig['analysis']['process'] = to_process

if opts.analyze:
    procs = analyze(baseconfig, module)
    save(procs, "Roast", baseconfig['paths']['input'])
else:
    procs = None

if opts.train:
    if not procs:
        procs = load("Roast", baseconfig['paths']['input'])
    train_mva(baseconfig, procs, module)

if opts.fill:
    if not procs:
        procs = load("Roast", baseconfig['paths']['input'])
    book_mva(baseconfig, procs, module)
    split_processes(baseconfig, procs)
    fill_histos(baseconfig, procs, module)
    save(procs, "Roast", baseconfig['paths']['output'])

if not any([opts.plot, opts.limit_file, opts.nums, opts.nums_rel, opts.ranking]):
    sys.exit(0)

if not procs:
    procs = load("Roast", baseconfig['paths']['output'])

normalize_processes(baseconfig, procs)
combine_processes(baseconfig, procs)

if opts.plot:
    style.setup()
    stack(baseconfig, procs)

if opts.limit_file:
    save_limit_histograms(baseconfig, procs)

if opts.nums:
    print_cutflow(baseconfig, procs, normalized=opts.nums_norm)
elif opts.nums_rel:
    print_cutflow(baseconfig, procs, True, normalized=opts.nums_norm)

if opts.ranking:
    print_mva_ranking(baseconfig)
