#!/usr/bin/env python

import logging
import math
import os

# Logging setup
logging.basicConfig(
        datefmt="%Y-%m-%d %H:%M",
        format="%(asctime)s [%(levelname)s] - %(filename)s %(lineno)d: %(message)s")

from optparse import OptionParser

parser = OptionParser(usage="%prog [options] configuration")
parser.add_option("-a", "--analyze",
        action="store_true",
        dest="analyze",
        help="analyze processes")
parser.add_option("-f", "--fill",
        action="store_true",
        dest="fill",
        help="fill histograms for analyzed processes")
parser.add_option("-n", "--numbers",
        action="store_true",
        dest="nums",
        help="print event yield information")
parser.add_option("-p", "--plot",
        action="store_true",
        dest="plot",
        help="save plots")
parser.add_option("-t", "--train",
        action="store_true",
        dest="train",
        help="train MVAs")
parser.add_option("-v", "--verbose",
        action="count",
        dest="verbosity",
        default=0,
        help="make output more verbose (allowed multiple times)")
parser.add_option("-q", "--quiet",
        action="count",
        dest="quietness",
        default=3,
        help="make output less verbose (allowed multiple times)")
opts, args = parser.parse_args()

logging.__dict__['root'].level = (opts.quietness - opts.verbosity) * 10

if len(args) != 1:
    parser.error('wrong number of arguments')

import ROOT as r
import sys

r.gROOT.SetBatch()
r.gSystem.Load("libTTHTauTauRoast")

try:
    from ROOT import roast
except:
    sys.stderr.write("Failed to import 'roast'!\n")
    sys.exit(1)

import yaml

from TTHTauTau.Roast.display import stack
from TTHTauTau.Roast.helper import *
from TTHTauTau.Roast.process import analyze, fill_histos
from TTHTauTau.Roast.style import *

(configfile,) = args

logging.info("reading configuration from %s", configfile)

basedir = os.path.join(os.environ['CMSSW_BASE'], 'src/TTHTauTau/Roast/data')

baseconfig = yaml.load(open(configfile))
processconfig = yaml.load(open(os.path.join(basedir, baseconfig['processes'])))
histogramconfig = yaml.load(open(os.path.join(basedir, baseconfig['histograms'])))

baseconfig['processes'] = processconfig
baseconfig['histograms'] = histogramconfig

to_process = []
for p in baseconfig['analysis']['process']:
    if p in baseconfig['analysis']['combine']:
        to_process += baseconfig['analysis']['combine'][p]['processes']
    else:
        to_process.append(p)
baseconfig['analysis']['process'] = to_process

if opts.analyze:
    procs = analyze(baseconfig)
    save(procs, "Roast", baseconfig['paths']['input'])
else:
    procs = None

if opts.train:
    if not procs:
        procs = load("Roast", baseconfig['paths']['input'])
    train_mva(baseconfig, procs)

if opts.fill:
    if not procs:
        procs = load("Roast", baseconfig['paths']['input'])
    book_mva(baseconfig, procs)
    fill_histos(baseconfig, procs)
    save(procs, "Roast", baseconfig['paths']['output'])

if not any([opts.plot, opts.nums]):
    sys.exit(0)

if not procs:
    procs = load("Roast", baseconfig['paths']['output'])

normalize_processes(baseconfig, procs)
combine_processes(baseconfig, procs)

if opts.plot:
    style = create_tdr_style()
    style.cd()
    stack(baseconfig, procs)

if opts.nums:
    print_cutflow(baseconfig, procs)
