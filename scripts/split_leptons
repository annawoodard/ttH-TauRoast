#!/usr/bin/env python
"""split_leptons

Splits a configuration into muon/electron only and combined modes.
"""

import os
import sys
import yaml

class Include:
    def __init__(self, *args):
        if len(args) == 1:
            self.args = args[0]
        else:
            self.args = list(args)

    def __repr__(self):
        return "<{0}({1})>".format(self.__class__.__name__, self.args)

    def __str__(self):
        if isinstance(self.args, list):
            return str(self.args)
        return self.args

def include_constructor(loader, node):
    try:
        value = loader.construct_scalar(node)
        return Include(value)
    except:
        values = loader.construct_sequence(node)
        return Include(*values)

def include_representer(dumper, data):
    if isinstance(data.args, list):
        return dumper.represent_sequence(u'!include', data.args)
    return dumper.represent_scalar(u'!include', data.args)

yaml.add_constructor(u'!include', include_constructor)
yaml.add_representer(Include, include_representer)

if len(sys.argv) != 2:
    sys.stderr.write("usage: split_leptons configuration\n")
    sys.exit(1)

conffile = sys.argv[1]

stub, ext = os.path.splitext(conffile)

# contains path suffix, # electrons, # muons
splitting = [
        ('_ee', 2, 0),
        ('_em', 1, 1),
        ('_mm', 0, 2)
        ]

for (suf, ele, mu) in splitting:
    with open(conffile) as f:
        config = yaml.load(f)
        for (n, c) in enumerate(config['physics']['cuts']):
            if 'NumLooseLeptons' in c:
                break
        config['physics']['cuts'].insert(n + 1,
                'NumLooseElectrons = ' + str(ele))
        config['physics']['cuts'].insert(n + 2,
                'NumLooseMuons = ' + str(mu))

        config['paths']['root'] += suf

        out = open(stub + suf + ext, 'w')
        out.write(yaml.dump(config))
        out.close()
