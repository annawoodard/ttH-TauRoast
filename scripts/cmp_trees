#!/usr/bin/env python

from root_numpy import root2array

import itertools
import matplotlib.gridspec as gs
import matplotlib.pyplot as plt
import numpy as np
import os
import pandas as pd
import sys


html = """
<hmtl>
<head>
<style>
tr:first-child {{background-color: #ccc}}
tr:nth-child(even) {{background-color: #f2f2f2}}
</style>
</head>
<body>
<section>
{0}
</section>
<section>
{1}
</section>
</body>
</html>
"""

img = '<a href="{0}.png"><img src="{0}.png" width="600" height="400"></img></a>'
row = '<tr>{}</tr>'
cell = '<td style="{0[1]}">{0[0]}</td>'
table = '<table>{}</table>'


def bin_it(df, mn, mx):
    bins = np.linspace(mn, mx, 30)
    groups = df.groupby(pd.cut(df, bins))
    return bins, groups


try:
    outdir, baseline, comparison = sys.argv[1:]
except ValueError:
    print "usage: {0[0]} outdir baseline:treename:name comparison:treename:name".format(sys.argv)
    sys.exit(1)

if not os.path.exists(outdir):
    os.makedirs(outdir)

fn, tn, basename = baseline.split(':')
basetree = root2array(fn, tn)

fn, tn, compname = comparison.split(':')
comptree = root2array(fn, tn)

baseonly = set(basetree.dtype.names) - set(comptree.dtype.names)
componly = set(comptree.dtype.names) - set(basetree.dtype.names)
both = set(comptree.dtype.names) & set(basetree.dtype.names)

print "Fields only in baseline: {}".format(", ".join(sorted(baseonly)))
print "Fields only in comparison: {}".format(", ".join(sorted(componly)))

baseframe = pd.DataFrame(basetree)
compframe = pd.DataFrame(comptree)

joint = pd.merge(baseframe, compframe, how='inner', on=['nEvent'], suffixes=('_b', '_c'))

tables = []
objs = ['ele0', 'ele1', 'mu0', 'mu1', 'tau0', 'tau1', 'jet0', 'jet1', 'jet2', 'jet3']
for obj in objs:
    quants = [col for col in both if col.startswith(obj)]

    cols = ['nEvent'] + ['_'.join(t) for t in itertools.product(quants, [basename, compname])]
    rows = [''.join(map(cell.format, [(c, '') for c in cols]))]
    count = 0
    for index, series in joint.iterrows():
        values_b = np.array([series[q + '_b'] for q in quants])
        values_c = np.array([series[q + '_c'] for q in quants])

        if not np.any(np.absolute(values_b - values_c) > 0.01 * np.absolute(values_b)):
            continue

        count += 1
        if count > 10:
            break

        rows += [''.join(map(cell.format, [(series['nEvent'], '')] + [(v, '' if abs(t[0] - t[1]) < 0.01 * abs(t[0]) else 'color: #e00') for t in zip(values_b, values_c) for v in t]))]
    tables.append(''.join(map(row.format, rows)))

with open(os.path.join(outdir, 'index.html'), 'w') as f:
    f.write(html.format('\n'.join(map(table.format, tables)), '\n'.join([img.format(c) for c in sorted(both) if c != 'nEvent'])))

for column in both:
    if column == 'nEvent':
        continue
    print "Processing {}".format(column)
    data_b = joint[column + '_b']
    data_c = joint[column + '_c']

    fig = plt.figure(figsize=(15, 10))

    g1 = gs.GridSpec(3, 1, height_ratios=[2, 2, 1])
    g1.update(top=0.95, bottom=0.05, left=0.05, right=0.59, hspace=0)

    ax1 = plt.subplot(g1[0, 0])
    ax2 = plt.subplot(g1[1, 0], sharex=ax1)
    ax3 = plt.subplot(g1[2, 0], sharex=ax2)

    ax1.set_title(column)
    ax3.set_ylabel('({c} - {b}) / {b}'.format(c=compname, b=basename))

    plt.setp(ax1.get_xticklabels(), visible=False)
    plt.setp(ax2.get_xticklabels(), visible=False)

    g2 = gs.GridSpec(2, 1)
    g2.update(top=0.95, bottom=0.05, left=0.61, right=0.95, hspace=0)

    ax4 = plt.subplot(g2[0, 0])
    ax5 = plt.subplot(g2[1, 0], sharex=ax4)

    ax4.set_title('({c} - {b}) / {b}'.format(c=compname, b=basename))
    ax4.yaxis.tick_right()
    ax4.yaxis.set_ticks_position('both')
    ax5.yaxis.tick_right()
    ax5.yaxis.set_ticks_position('both')

    plt.setp(ax4.get_xticklabels(), visible=False)

    diff = ((data_c - data_b) / data_b)[(data_b > -666) & (data_c > -666)]

    data_b = data_b[data_b > -666]
    data_c = data_c[data_c > -666]

    mn = 0
    mx = 0
    if len(data_b) > 0:
        mn = min(data_b.min(), mn)
        mx = max(data_b.max(), mx)
    if len(data_c) > 0:
        mn = min(data_c.min(), mn)
        mx = max(data_c.max(), mx)

    if len(diff) > 0:
        try:
            ax4.hist(diff, bins=20)
            ax5.hist(diff, bins=20)
        except KeyError:
            pass
        except AttributeError:
            pass

    bins, groups_b = bin_it(data_b, mn, mx)
    centers = [.5 * (a + b) for a, b in zip(bins, bins[1:])]
    ax1.errorbar(x=centers, y=groups_b.count(), yerr=groups_b.std(), fmt='o', label=basename)
    ax2.errorbar(x=centers, y=groups_b.count(), yerr=groups_b.std(), fmt='o')

    bins, groups_c = bin_it(data_c, mn, mx)
    centers = [.5 * (a + b) for a, b in zip(bins, bins[1:])]
    ax1.errorbar(x=centers, y=groups_c.count(), yerr=groups_c.std(), fmt='o', label=compname)
    ax2.errorbar(x=centers, y=groups_c.count(), yerr=groups_c.std(), fmt='o')

    ax3.errorbar(x=centers, y=groups_b.count() / groups_c.count(), fmt='o')

    ax1.legend()
    ax1.set_ylim(ymin=0)
    # ax2.set_ylim(ymin=0)

    if len(data_b) > 0 or len(data_c) > 0:
        ax2.set_yscale('log')
    if len(diff) > 0:
        ax5.set_yscale('log', nonposy='clip')

    plt.savefig(os.path.join(outdir, column + '.png'))
    plt.close()
